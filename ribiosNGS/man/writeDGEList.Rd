% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/writeDGEList.R
\name{writeDGEList}
\alias{writeDGEList}
\title{Write an DGEList object as plain files for downstream analysis}
\usage{
writeDGEList(dgeList, exprs.file, fData.file, pData.file, group.file,
  groupLevels.file, feat.name = NULL, feat.desc = NULL)
}
\arguments{
\item{dgeList}{An DGEList object}

\item{exprs.file}{File name where counts are saved}

\item{fData.file}{File name where feature annotations are saved}

\item{pData.file}{File name where sample annotations are saved}

\item{group.file}{File name where the sample group information is saved}

\item{groupLevels.file}{File where the sample group levels are saved}

\item{feat.name}{Feature names. Can be a column name in \code{genes} of the DGEList object, or a vector of the same length as the fetaures. If \code{NULL}, row names of the count matrix are used.}

\item{feat.desc}{Feature descriptions, used in GCT files. If \code{NULL}, 'GeneSymbol' will be used if the column is present, otherwise no description will be used

Expression values are saved by default in the gct format, unless the file name ends with tsv in which case a tab-separated value (TSV) file will be saved.

Sample group and group level information are derived from the \code{group} column of the sample annotation.}
}
\description{
Write an DGEList object as plain files for downstream analysis
}
\note{
In case the input matrix has no feature name, the feature names are set to be the integer array starting from 1.

In case no \code{genes} item is available in the DGEList, a minimal data.frame containing one column, \code{Feature}, is exported with row names of the count matrix used as both row names as well as the content of the \code{Feature} column.
}
\examples{

y <- matrix(rnbinom(10000,mu=5,size=2),ncol=4)
d <- DGEList(counts=y, group=rep(1:2,each=2))

exprsFile <- tempfile()
fDataFile <- tempfile()
pDataFile <- tempfile()
groupFile <- tempfile()
groupLevelsFile <- tempfile()
writeDGEList(d, exprs.file=exprsFile, fData.file=fDataFile, pData.file=pDataFile, 
  group.file=groupFile, groupLevels.file=groupLevelsFile)

head(ribiosIO::read_gct_matrix(exprsFile))
head(ribiosIO::readMatrix(fDataFile))
head(ribiosIO::readMatrix(pDataFile))
head(readLines(groupFile))
head(readLines(groupLevelsFile))
}
